AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Resources:
  privateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName
  privateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref privateVPC
      AvailabilityZone:
        Fn::Select:
         - 0
         - Fn::GetAZs: ""
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","subnet-a"]]
  privateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref privateVPC
      AvailabilityZone:
        Fn::Select:
         - 1
         - Fn::GetAZs: ""
      CidrBlock: 172.31.2.0/24
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: !Join ["-", [!Ref "AWS::StackName","subnet-b"]]
  privateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref privateVPC
  privateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet1
      RouteTableId: !Ref privateRouteTable
  privateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref privateSubnet2
      RouteTableId: !Ref privateRouteTable
  dynamoDBEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal: "*"
          Action:
            - "dynamodb:*"
          Resource:
            - "*"
      RouteTableIds:
        - !Ref privateRouteTable
      ServiceName: !Sub com.amazonaws.${AWS::Region}.dynamodb
      VpcId: !Ref privateVPC
  CBXEmail:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: CBXEmail
    Metadata:
      SamResourceId: CBXEmail
  EmailVerificationFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src
      Handler: app.lambda_handler
      Runtime: python3.9
      Policies:
      - VPCAccessPolicy: {}
      - Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Action:
          - ses:SendEmail
          Resource: '*'
      Events:
        CBXSignupAPIGateway:
          Type: Api
          Properties:
            Path: /EmailVerificationFunction
            Method: post
        CBXEmailEvent:
          Type: SQS
          Properties:
            Queue:
              Fn::GetAtt:
              - CBXEmail
              - Arn
      Environment:
        Variables:
          EMAIL_FROM: 18bd1a1042@gmail.com
          EMAIL_SUBJECT: Please verify your email address for CloudBuilders Technologies
          SES_REGION: us-east-1
          QUEUE_URL:
            Fn::GetAtt:
            - CBXEmail
            - QueueUrl
    Metadata:
      SamResourceId: EmailVerificationFunction
  EmailVerificationFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Fn::GetAtt:
        - EmailVerificationFunction
        - Arn
      Principal: sqs.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - CBXEmail
        - Arn
    Metadata:
      SamResourceId: EmailVerificationFunctionPermission
  CBXSignupAPIGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: EmailVerificationFunction
      Principal: apigateway.amazonaws.com
    Metadata:
      SamResourceId: CBXSignupAPIGatewayPermission
Outputs:
  QueueUrl:
    Description: URL of the SQS queue
    Value:
      Ref: CBXEmail
  FunctionName:
    Description: Name of the Lambda function
    Value:
      Ref: EmailVerificationFunction
